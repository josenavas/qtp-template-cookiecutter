Cookiecutter Qiita Type Plugin Template
=======================================

`Cookiecutter <https://github.com/audreyr/cookiecutter>`__ template for a
`Qiita <https://github.com/biocore/qiita/>`__ Type plugin.

This template sets up the skeleton code to create a Qiita type plugin.

Getting Started
---------------

To create your own Qiita Type plugin, first install Cookiecutter:

```bash
pip install -U cookiecutter
```

Then, generate the skeleton of the plugin by running cookiecutter (it will
create the skeleton in the current directory):

```bash
cookiecutter https://github.com/qiita-spots/qtp-template-cookiecutter
```

You'll be prompted to introduce values so cookiecutter can set up the skeleton
correctly. You can introduce new values or just hit enter to use the default
values. Any of these values can be manually changed through the code:

 - `project_name`: This is the name of your project. It will be added on the
 project `README.rst` file and the `setup.py` file. `Qiita Type Plugin` is appended
 to the project name. We highly recommend to not use the default value.
 - `repo_name`: The github repository name. The default value is generated by
 lowercasing the `project_name` value and changing spaces by `-`.
 - `organization_name`: The github organization name in which the repository
 will live.
 - `module_name`: The name of the module. The default value is generated by
 replacing the `-` characters in the `repo_name` value by `_`.
 - `author`: The name of the plugin author
 - `email`: The email to contact the plugin author
 - `url`: The url of the project. The default value is generated using the
 `organization_name` and `repo_name` values.

Example:

.. code-block:: bash
    project_name [New Types]: biom
    repo_name [qtp-biom]:
    organization_name [qiita-spots]:
    module_name [qtp_biom]:
    author [Qiita development team]:
    email [qiita.help@gmail.com]:
    url [https://github.com/qiita-spots/qtp-biom]:

After all the values have been introduced, Cookiecutter created a directory
using the `repo_name` value in the current directory. The generated skeleton
takes care of most of the initial plugin setup and Qiita communication, as well
as common repository set up, including travis and coverages. As a plugin
developer, you need to enable travis and coverage to be correctly reported,
and you just need to fill up the "TODO's" marked in the code. The code
is documented so the developer has directions to fill the "TODO's". The following
list contains a general overview of the "TODO's":

 - File 'README.rst': Add a description of the artifact types added by the type plugin
 - File 'module_name/validate.py': Code to validate and fix the files of a new artifact
 - File 'module_name/summary.py': Code to generate an HTML summary of an artifact
 - File 'module_name/tests/test_validate.py': Code to properly test the validation of an artifact
 - File 'module_name/tests/test_summary.py': Code to properly test the HTML generation of an artifact summary
 - File 'module_name/tests/test_plugin.py': Code to properly test the integration of the plugin

If you filled all the "TODO's" present in the code, congratulations! you finished
writing your Qiita Type plugin!
